events {
  worker_connections 1024;
}
worker_processes 2;

error_log stderr;

http {
  resolver 127.0.0.11 ipv6=off;

  lua_package_path "/usr/local/openresty/lualib/?.lua;/usr/local/openresty/luajit/share/lua/5.1/?.lua;/lua/src/?.lua";
  lua_package_cpath "/usr/local/openresty/lualib/?.so;/usr/local/openresty/luajit/lib/lua/5.1/?.so;";

  init_by_lua_block {
    edge_computing = require "resty-edge-computing"
    require "cjson"
    require 'resty.http'
  }

  init_worker_by_lua_block {
    edge_computing.interval = 5 -- polling seconds
    edge_computing.workers_max_jitter = 5 -- jitter among the workers seconds
    edge_computing.api_uri = "http://localhost:9090/computing_units.json" -- API uri
    edge_computing.api_timeout = 2 -- API timeout seconds

    edge_computing.spawn_poller()
  }

  upstream backend {
    server ingest;
  }

  server {
    listen 9090;

    location /computing_units.json {
      content_by_lua_block {
        ngx.header["Content-Type"] = 'application/json'

        local computing_units = {}
        table.insert(computing_units, {id="hello", phase="content", code="ngx.say('Hello,world!')"})
        table.insert(computing_units, {id="authentication", phase="rewrite", code="local token = ngx.var.arg_token or ngx.var.cookie_superstition \n if token ~= 'token' then \n return ngx.exit(ngx.HTTP_FORBIDDEN) \n else \n ngx.header['Set-Cookie'] = {'superstition=token'} \n end"})

        ngx.say(require "cjson".encode(computing_units))
      }
    }
  }

  proxy_cache_path /tmp levels=1:2 keys_zone=my_cache:10m max_size=1g inactive=10m use_temp_path=off;
  server {
    listen 8080;

    location / {
      proxy_cache my_cache;
      proxy_cache_lock on;

      proxy_cache_lock_timeout 2s;
      proxy_cache_use_stale error timeout updating invalid_header;

      proxy_ignore_headers Cache-Control;
      proxy_cache_valid any 2s;

      add_header X-Cache-Status $upstream_cache_status;
      proxy_pass http://backend;
    }

    rewrite_by_lua_block {
      local status, errs = edge_computing.execute()
      if errs ~= {} then
        for _, err in ipairs(errs) do
          ngx.log(ngx.ERR, " edge_computing.execute error ", err)
        end
      end
    }

    access_by_lua_block {
      local status, errs = edge_computing.execute()
      if errs ~= {} then
        for _, err in ipairs(errs) do
          ngx.log(ngx.ERR, " edge_computing.execute error ", err)
        end
      end
    }

  }
}
